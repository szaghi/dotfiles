" Personal preferences .vimrc file
" Maintained by Stefano Zaghi <stefano.zaghi@gmail.com>

" Use vim settings, rather than vi settings (much better!)
" This must be first, because it changes other options as a side effect.
set nocompatible

" Plugins handling with vim-plug and plugconf {{{
call plug#begin('~/.vim/plugged')
" apparence
Plug 'altercation/vim-colors-solarized'
Plug 'luochen1990/rainbow'
Plug 'jiangxincode/mpi.vim', { 'for':  ['fortran', 'c'] }
" main screen utilities
Plug 'majutsushi/tagbar'
Plug 'bling/vim-airline'
Plug 'kien/ctrlp.vim'
Plug 'moll/vim-bbye'
Plug 'myusuf3/numbers.vim'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'terryma/vim-multiple-cursors'
" selection
Plug 'vasconcelloslf/vim-foldfocus', { 'for':  ['python','fortran'] }
Plug 'chrisbra/NrrwRgn'
Plug 'deris/vim-rengbang'
Plug 'Konfekt/FastFold'
Plug 'pelodelfuego/vim-swoop'
Plug 'gcmt/wildfire.vim'
" spell check and languages
Plug 'scrooloose/syntastic', { 'for':  ['python', 'tex', 'latex'] }
Plug 'https://github.com/nvie/vim-flake8', { 'for':  'python' }
Plug 'vim-scripts/LanguageTool'
Plug 'beloglazov/vim-online-thesaurus', { 'on': ['OnlineThesaurusCurrentWord','Thesaurus'] }
Plug 'maksimr/vim-translator', { 'on': 'Translate' }
Plug 'reedes/vim-wordy', { 'on': 'Wordy'}
" text utilities
Plug 'vim-scripts/VisIncr', { 'on': ['I','II','IB','IIB','IO','IIO','IX','IIX','IYMD','IMDY','IDMY','IA','ID','IM','IPOW','IIPOW'] }
Plug 'yaroot/vissort'
Plug 'godlygeek/tabular'
Plug 'junegunn/vim-easy-align'
Plug 'jiangmiao/auto-pairs'
Plug 'gorkunov/smartpairs.vim'
Plug 'tpope/vim-commentary'
Plug 'EinfachToll/DidYouMean'
Plug 'Z1MM32M4N/vim-superman'
Plug 'csexton/trailertrash.vim'
Plug 'kshenoy/vim-signature'
Plug 'jeetsukumaran/vim-indentwise'
" git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'jaxbot/github-issues.vim'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'gregsexton/gitv'
" utilities
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-abolish'
Plug 'sirver/ultisnips'
Plug 'jamessan/vim-gnupg'
Plug 'laurentgoudet/vim-howdoi'
Plug 'ajh17/VimCompletesMe'
Plug 'itchyny/calendar.vim', { 'on': 'Calendar' }
Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
Plug 'Shougo/vimshell.vim'
Plug 'Shougo/unite.vim'
Plug 'idanarye/vim-vebugger'
Plug 'farseer90718/unite-workflow'
Plug 'mhinz/vim-startify'
Plug 'wakatime/vim-wakatime'
Plug 'kopischke/vim-fetch'
Plug 'KabbAmine/vCoolor.vim'
Plug 'sk1418/HowMuch', { 'on': 'HowMuch' }
Plug 'chrisbra/vim-diff-enhanced'
Plug 'niboan/plugconf'
" programming languages
Plug 'lervag/vim-latex', { 'for': 'tex' }
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" unknown
call plug#end()
call plugconf#load()
" }}}

" Highlighting and colors {{{
if &t_Co > 2 || has("gui_running")
   syntax on " switch syntax highlighting on, when the terminal has colors
endif
set background=dark
colorscheme solarized
" }}}

" Editing behaviour {{{
let mapleader = ","                                                      " leader symbol
set nowrap                                                               " don't wrap lines
set tabstop=2                                                            " a tab is 2 spaces
set softtabstop=2                                                        " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab                                                            " expand tabs by default (overloadable per file type later)
set shiftwidth=2                                                         " number of spaces to use for autoindenting
set shiftround                                                           " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start                                           " allow backspacing over everything in insert mode
set autoindent                                                           " always set autoindenting on
set copyindent                                                           " copy the previous indentation on autoindenting
set number                                                               " always show line numbers
set showmatch                                                            " set show matching parenthesis
set ignorecase                                                           " ignore case when searching
set smartcase                                                            " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                                                             " insert tabs on the start of a line according to shiftwidth, not tabstop
set scrolloff=4                                                          " keep 4 lines off the edges of the screen when scrolling
set virtualedit=all                                                      " allow the cursor to go in to "invalid" places
set hlsearch                                                             " highlight search terms
set incsearch                                                            " show search matches as you type
set nolist                                                               " don't show invisible characters by default,
set mouse=a                                                              " enable using the mouse if terminal emulator supports it (xterm does)
set formatoptions+=1                                                     " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid)
set encoding=utf-8                                                       " file encoding
set lazyredraw                                                           " don't update the display while executing macros
set laststatus=2                                                         " tell VIM to always put a status line in, even if there is only one window
set cmdheight=2                                                          " use a status bar that is 2 rows high
let g:buftabs_only_basename = 1                                          " show only basename in tabs title
let g:buftabs_marker_modified = "+"                                      " tabs marker
set hidden                                                               " hide buffers instead of closing them this
set switchbuf=useopen                                                    " reveal already opened files from the quickfix window instead of opening new buffers
set nobackup                                                             " do not keep backup files, it's 70's style cluttering
set noswapfile                                                           " do not write annoying intermediate swap files
set viminfo='10,\"100,:20,n~/.viminfo                                    " read/write a .viminfo file, 10 marks, 100 lines of registers, 20 lines of command line
set wildmenu                                                             " make tab completion for files/buffers act like bash
set wildmode=list:full                                                   " show a list when pressing tab and complete first full match
" set esckeys                                                              " allow cursor keys in insert mode
" set ttyfast                                                              " optimize for fast terminal connections
" set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_                                     " show “invisible” characters
set title                                                                " change the terminal's title
set noerrorbells                                                         " don't beep
set showcmd                                                              " show (partial) command in the last line of the screen
set nomodeline                                                           " disable mode lines (security measure)
"set diffopt+=iwhite                                                      " ignoring trailing white spaces when doing diff
set iskeyword+=:                                                         " turn on the search of keyword
set foldenable                                                           " enable folding
set foldcolumn=1                                                         " add a fold column
set foldmethod=marker                                                    " detect triple-{ style fold markers
set foldlevelstart=0                                                     " start out with everything folded
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo " which commands trigger auto-unfold
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·                           " characters are not displayed on long lines
set fileformats="unix,dos,mac"                                           " file formats
set termencoding=utf-8                                                   " file encoding
" }}}

" Filetype specific handling {{{
source ~/.vim/fortranrc.vim
source ~/.vim/fobosrc.vim
source ~/.vim/pythonrc.vim
" }}}

" Autocommands {{{
if has("autocmd")
  " autocmd FileType * set list!
  " let terminal resize scale the internal windows
  autocmd VimResized * :wincmd =

  " positiong the cursor to the last position before closing the file
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  " Don't screw up folds when inserting text that might affect them, until
  " leaving insert mode. Foldmethod is local to the window.
  augroup folding
    autocmd!
    autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
    autocmd InsertLeave * let &l:foldmethod=w:last_fdm
    autocmd FileType sh,bash let sh_fold_enabled=1
    autocmd FileType xml let xml_syntax_folding=1
  augroup END

  " programming tips {{{
  augroup programming
    autocmd!
    " removing trailing space
    autocmd FileType fortran,make,dosini,sh,bash,python,c,cpp,tex,vim,css,java,php,xml,markdown autocmd BufWritePre <buffer> :%s/\s\+$//e
    " condensing multiple blank lines into a single blank line
    autocmd FileType fortran,make,sh,bash,c,cpp,tex,vim,css,java,php,xml,markdown autocmd BufWritePre <buffer> :%s/\n\{3,}/\r\r/e
    " set fold method to syntax
    autocmd FileType fortran,make,dosini,sh,bash,c,cpp,tex,css,java,php,xml,markdown set foldmethod=syntax
  augroup END
  " }}}
endif
" }}}

" Mappings {{{
" Perl/Python regex
nnoremap / /\v
xnoremap / /\v
" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>
" Change window splits
nnoremap <silent> <A-Up> :wincmd k<CR>
nnoremap <silent> <A-Down> :wincmd j<CR>
nnoremap <silent> <A-Left> :wincmd h<CR>
nnoremap <silent> <A-Right> :wincmd l<CR>
" Map Y do be analog of D
noremap Y y$
" Wrap ON/OFF
noremap <F2> :set wrap! wrap?<CR>
" Buffer navigation
nnoremap <C-Right> :bnext<CR>
nnoremap <C-Left> :bprevious<CR>
" CtrlP file explorer
nnoremap <C-e> :CtrlP<CR>
" Buffer close
nnoremap qq :Bdelete<CR>
" Cursor movements limited or not
function! ToggleVirtualedit()
  if &virtualedit != ""
    set virtualedit&
    echo "Cursor movements limited"
  else
    set virtualedit=all
    echo "Cursor movements unlimited"
  endif
endfunction
noremap <C-C> :call ToggleVirtualedit()<CR>
" Maps Ctrl-J to insert line break (like the opposite of J)
nnoremap <NL> i<CR><ESC>
" Set NumberToggle ON/OFF
nnoremap <F12> :NumbersToggle<CR>
" markdown preview
" nnoremap G :Start! github-markdown-preview %<CR>
" nnoremap G :Start! greadme %<CR>
" }}}
